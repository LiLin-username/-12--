//实验三代码：
//性别的枚举  
enum Gender: Int  {
    case male  //男性 
    case female   //女性
    case  unknow // 未知
    //重载>操作符，方便后面排序使用
    static func >(Ihs: Gender,rhs: Gender) -> Bool {
        return Ihs.rawValue < rhs.rawValue
    } 
}

//Person类 
class Person: CustomStringConvertible {
    var firstName: String  //姓 
    var lastName: String  //名
    var age: Int      //年纪 
    var gender: Gender   //性别 
    
    var  fullName: String {
        return  firstName + lastName
    }
    
    //构造方法 
    init(firstName: String,lastName: String,age: Int ,gender: Gender ) {
        self.firstName = firstName
        self.lastName = lastName
        self.age = age
        self.gender = gender 
    }
    
    convenience init(firstName: String,age: Int ,gender: Gender) {
        self.init(firstName:firstName,lastName: "",age: age,gender: gender)
}

    convenience init (firstName: String) {
    self.init(firstName: firstName,age: 0,gender: Gender.unknow)
        
    }
    
    required convenience init() {
        //required修饰符只能用于修饰类初始化方法。
        //当子类含有异于父类的初始化方法时（初始化方法参数类型和数量异于父类），
        //子类必须要实现父类的required初始化方法，并且使用required修饰符而不是override
        //当子类没有初始化方法时，可以不用实现父类的required方法
        //最大的好处是可以保证依赖于某个指定初始化方法的便利初始化方法一直可以被使用
     self.init(firstName: "")
    }
    
    //重载 ==
    static func ==(Ihs: Person ,rhs: Person) -> Bool {
        return Ihs.fullName == rhs.fullName && Ihs.age == rhs.age  && Ihs.gender == rhs.gender
    }
    
    //重载！=
    static func !=(aa: Person ,bb: Person  ) -> Bool {
        return  !( aa == bb )
    }
    
     //实现CustomStringConvertible协议中的计算属性，可以使用print直接输出对象内容
    var description: String {
        return "fullName: \(self.fullName),  age:  \(self.age), gender:  \(self.gender)"
}
 func run(){
        print("Person \(self.fullName) is running !")
    }
}
var p1 = Person(firstName: "章 " )
var p2 = Person(firstName: "罗",lastName: "坤宇 ", age : 21, gender:  .male)
var p3 = Person(firstName:"华",lastName: "驼",age: 23, gender: .female)


实验总代码：
//性别的枚举  
enum Gender: Int  {
    case male  //男性 
    case female   //女性
    case  unknow // 未知
    //重载>操作符，方便后面排序使用
    static func >(Ihs: Gender,rhs: Gender) -> Bool {
        return Ihs.rawValue < rhs.rawValue
    } 
}

//公寓的枚举
enum Department {
    case one, two, three
}

//学校协议
protocol SchoolProtocol {
    var department: Department { get set }
    func lendBook()
}

//Person类 
class Person: CustomStringConvertible {
    var firstName: String  //姓 
    var lastName: String  //名
    var age: Int      //年纪 
    var gender: Gender   //性别 
    
    var  fullName: String {
        return  firstName + lastName
    }
    
    //构造方法 
    init(firstName: String,lastName: String,age: Int ,gender: Gender ) {
        self.firstName = firstName
        self.lastName = lastName
        self.age = age
        self.gender = gender 
    }
    
    convenience init(firstName: String,age: Int ,gender: Gender) {
        self.init(firstName:firstName,lastName: "",age: age,gender: gender)
    }
    
    convenience init (firstName: String) {
    self.init(firstName: firstName,age: 0,gender: Gender.unknow)
        
    }
    
    required convenience init() {
        //required修饰符只能用于修饰类初始化方法。
        //当子类含有异于父类的初始化方法时（初始化方法参数类型和数量异于父类），
        //子类必须要实现父类的required初始化方法，并且使用required修饰符而不是override
        //当子类没有初始化方法时，可以不用实现父类的required方法
        //最大的好处是可以保证依赖于某个指定初始化方法的便利初始化方法一直可以被使用
     self.init(firstName: "")
        
    }
    
    //重载 ==
    
    static func ==(Ihs: Person ,rhs: Person) -> Bool {
        return Ihs.fullName == rhs.fullName && Ihs.age == rhs.age  && Ihs.gender == rhs.gender
    }
    
    //重载！=
    
    static func !=(aa: Person ,bb: Person  ) -> Bool {
        return  !( aa == bb )
    }
    
     //实现CustomStringConvertible协议中的计算属性，可以使用print直接输出对象内容
    var description: String {
        return "fullName: \(self.fullName),  age:  \(self.age), gender:  \(self.gender)"
    }
    
    //输出Person XXX is running
    func run() {
        print("Person \(self.fullName) is running")
    }
}

//----------------------

//教师类
class Teacher: Person, SchoolProtocol {
    var title: String  //标题
    var department: Department  //公寓

    //构造方法
    init(title: String, firstName: String, lastName: String, age: Int, gender: Gender, department: Department) {
        self.title = title
        self.department = department
        super.init(firstName: firstName, lastName: lastName, age: age, gender: gender)
    }

    init(title: String, department: Department) {
        self.title = title
        self.department = department
        super.init(firstName: "", lastName: "", age: 0, gender: .unknow)
    }

    convenience required init() {
        self.init(title: "", department: Department.one)
    }

    //重写父类的计算属性
    override var description: String {
        return "title: \(self.title), fullName: \(self.fullName), age: \(self.age), gender: \(self.gender), department: \(self.department)"
    }

    //重载父类run方法
    override func run() {
        print("Teacher \(self.fullName) is running")
    }

    //遵循协议的方法
    func lendBook() {
        print("Teacher \(self.fullName) lend a book")
    }
}
//----------------------
//学生类
class Student: Person, SchoolProtocol {
    var stuNo: Int  //学号
    var department: Department  //公寓

    //构造方法
    init(stuNo: Int, firstName: String, lastName: String, age: Int, gender: Gender, department: Department) {
        self.stuNo = stuNo
        self.department = department
        super.init(firstName: firstName, lastName: lastName, age: age, gender: gender)
    }

    init(stuNo: Int, department: Department) {
        self.stuNo = stuNo
        self.department = department
        super.init(firstName: "", lastName: "", age: 0, gender: Gender.unknow)
    }

    required convenience init() {
        self.init(stuNo: 0, department: .one)
    }

    //重写父类的计算属性
    override var description: String {
        return "stuNo: \(self.stuNo), fullName: \(self.fullName), age: \(self.age), gender: \(self.gender), department: \(self.department)"
    }

    //重载父类run方法
    override func run() {
        print("Student \(self.fullName) is running")
    }

    //遵循协议的方法
    func lendBook() {
        print("Teacher \(self.fullName) lend a book")
    }


print("-------------------")
var p1 = Person(firstName: "章 " )
var p2 = Person(firstName: "罗",lastName: "坤宇 ", age : 21, gender:  .male)
var p3 = Person(firstName:"华",lastName: "驼",age: 23, gender: .female)


print(p1)
print (p2)
print(p3)
print("p1 等于 p1:  \(p1 == p1)")
print("p1 == p2  : \(p1 == p2)")
print("p2 != p3 : \(p2  != p3)")
p1.run()
p2.run()
p3.run()

print("----------------------")
var t1 = Teacher(title: "hello", department: .one)
var t2 = Teacher(title: "你好 ",firstName: "李 ",lastName: "淋 ", age : 18, gender:  .female,department: .two)
print(t1)  //输出：title: hello, fullName: , age: 0, gender: 
print(t2)  //输出：title: 你好 , fullName: 李 淋 , age: 18, gender: female, department: two
t1.run()   //输出:Teacher  is running
t2.run()   //输出:Teacher 李 淋  is running

print ("----------------------")
var s1 = Student(stuNo: 2016311, department: .two)
var s2 = Student(stuNo: 2016312,firstName: "李 ",lastName: "淋 ", age : 18, gender:  .female,department: .two)
print(s1)  //输出:stuNo: 2016311, fullName: , age: 0, gende
print(s2)  //输出:stuNo: 2016312, fullName: 李 淋 , age: 18, gender: female, department: two
s1.run()
s2.run()

//初始化一个空的Person数组
var array = [Person]()

//生成6个Person对象
print("--------已完成各对象初始化)--------------")
for i in 1...6 {
    let temp = Person(firstName: "张", lastName: "\(i)", age: 20, gender: .male)
    array.append(temp)
}


//生成4个Teacher对象
for i in 1...4 {
    let temp = Teacher(title: "hello", firstName: "李", lastName: "\(i)", age: 21 + i, gender: .female, department: .one)
    array.append(temp)
}

//生成3个Student对象
for i in 1...3 {
    let temp = Student(stuNo: 2016310 + i, firstName: "王", lastName: "\(i)", age: 17 + i, gender: .male, department: .two)
    array.append(temp)
}

//定义一个字典，用于统计每个类的对象个数
print("\n--------统计每个类的对象个数---------")
var dict = ["Person": 0, "Teacher": 0, "Student": 0]

for item in array {
    if item is Teacher {  //是否是Teacher类
        dict["Teacher"]! += 1
    } else if item is Student {  //是否是Student
        dict["Student"]! += 1
    } else {  //Person类
        dict["Person"]! += 1
    }
}

//输出字典值
for (key, value) in dict {
    print("\(key) has \(value) items")
}

//根据全名从前往后排序
print("根据全名从前往后排序并输出:")
array.sort {
    return $0.fullName < $1.fullName
}
for a in array {
    print(a)  
}

//根据gender和age从大往小排序
print("根据gender和age从大往小排序:")
array.sort {
    return ($0.gender > $1.gender) && ($0.age > $1.age)
}
for  item in array {
    print(item)  
}

//穷举，调用run方法和lendBook方法
print("穷举，调用run方法和lendBook方法:")
for item in array {
    
    item.run()
    if let teacher = item as? Teacher {
        teacher.lendBook()
    }else if let Student = item as? Student {
        Student.lendBook()
    }
    
    
    
}

